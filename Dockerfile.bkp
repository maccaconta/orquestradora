# define a imagem base
FROM python:3.8.3

RUN apt-get update && apt-get upgrade -y && apt-get install -y libsqlite3-dev
RUN apt-get install -y software-properties-common

# define diretório de trabalho dentro do contêiner
WORKDIR /usr/src/api-orchest

# variáveis de ambiente
# ----------------------

#impede o Python de copiar arquivos pyc para o contêiner
ENV PYTHONDONTWRITEBYTECODE 1

# garante que a saída Python seja registrada no terminal,
# possibilitando monitorar os registros do Django em tempo real.

ENV PYTHONUNBUFFERED 1

ENV API_URL=http://ppn2-homol.assistentevirtual.sp.gov.br/orchest/v1/watson/
# ENV API_URL=http://localhost:8000/orchest/v1/watson/

# instala dependências
# ---------------------

# instala e atualiza a versão pip que está no recipiente.
RUN pip install -U pip setuptools


# e instala dependências

COPY ./requirements.txt /usr/src/api-orchest
RUN pip install -r requirements.txt

# copia o código fonte do projeto para o diretório de trabalho no contêiner
COPY . /usr/src/api-orchest

RUN chmod a+w /usr/src/api-orchest/api/static/environment.json

RUN chmod -R a+w /usr/src/api-orchest/api/static/

RUN chmod -R a+w /usr/src/api-orchest/

# instala o pyodbc

# set system ready for pyodbc
RUN apt-get update
RUN apt-get install -y build-essential libssl-dev libffi-dev
RUN apt-get install -y python3-dev


#install sql-server
RUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)"
RUN apt-get update
RUN apt-get install -y mssql-server


# install pyodbc
RUN apt-get install -y unixodbc-dev
RUN pip install pyodbc


# install pyodbc 13 sql server driver
# sudo su
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -

#Download appropriate package for the OS version
#Choose only ONE of the following, corresponding to your OS version

#Ubuntu 16.04
# curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list

#Ubuntu 18.04
# curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list

#Ubuntu 20.04
# curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list

#Ubuntu 21.04
# curl https://packages.microsoft.com/config/ubuntu/21.04/prod.list > /etc/apt/sources.list.d/mssql-release.list

#Debian 10 -> DOCKER PYTHON 3.8.3
RUN curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list

# exit

RUN apt-get update
RUN ACCEPT_EULA=Y apt-get install -y msodbcsql17
# optional: for bcp and sqlcmd
RUN ACCEPT_EULA=Y apt-get install -y mssql-tools
RUN echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
# RUN source ~/.bashrc

# install mssql-django

RUN pip install mssql-django
RUN pip install django-pyodbc
RUN pip install django-mssql-backend


# abre a porta 8000 para acesso de outros aplicativos.
EXPOSE 8000


# Define os comandos executáveis no contêiner
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]    